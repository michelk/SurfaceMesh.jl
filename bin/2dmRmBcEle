#!/usr/bin/env julia
# | Remove elements marked with an certain id or name
## * Local function definitions
using ArgParse

function parseCmd(a)
    splitIds(s) = int(split(s, ':'))

    s = ArgParseSettings("Remove certain BC-Elements")
    @add_arg_table s begin
        "--name", "-n"
          arg_type = String
          help = "BC Element Name to remove from mesh (concat with ':'; eg 'wall:quai')"
        "mesh-file"
          help = "mesh (2dm)-file"
    end
    args = parse_args(a, s)

    if args["name"] == nothing && args["name"] == nothing
        print("Please specify an BC-Element Name to remove from mesh\n")
        exit(1)
    end
    args
end

# | Parses
function parse2dmBcValE(f::String, names :: String)
    parseBcDictLine(l :: String) = split(l)[3:4]
    parseBcEleLine(l :: String) = int(split(l)[3:4])
    unquote(s) = replace(s, "\"", "")
    nms = split(names, ':')
    nmDict =                            # mapping BC-Ele-names to ids
        Dict{Int,String}()
    bcs =                               # element ids with BC-Ele-names
        Int[]
    con = openMesh(f)
    while true
        l = readline(con)
        if l == ""
            break
        elseif match(r"^BC\s+2", l) != nothing
            (n,v) = parseBcDictLine(l)
            nmDict[int(v)] = unquote(n)
        elseif match(r"^BC_VAL\s+E", l) != nothing
            (id,g) = parseBcEleLine(l)
            if nmDict[g] in nms
                push!(bcs, id)
            else
                continue
            end
        else
            continue
        end
    end
    close(con)
    bcs
end

function write2dmWithoutBcValE(f::String, bcs :: Array{Int,1})
    con = openMesh(f)
    while true
        l = readline(con)
        if l == ""
            break
        else
            m = match(r"^(E3T|E4Q)", l)
            if m == nothing
                write(l)
            else
                n = int(split(l)[2])
                if n in bcs
                    continue
                else
                    write(l)
                end
            end
        end
    end
    close(con)
end

openMesh(f :: Nothing) = STDIN
openMesh(f :: String) = open(f, "r")

function main()
    args = parseCmd(ARGS)           # parse command-line
    bcs =                           # get element ids, with BC_VAL-tag
        parse2dmBcValE(args["mesh-file"], args["name"])
    write2dmWithoutBcValE(args["mesh-file"], bcs) # write modified mesh to stdout
end

main()                                  # actually do it
